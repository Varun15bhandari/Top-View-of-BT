/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int data;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode(int val) { data = val; left = null, right = null }
 * }
 **/
 class Pair<U, V> {
    private final U key;
    private final V value;

    public Pair(U key, V value) {
        this.key = key;
        this.value = value;
    }

    public U getKey() {
        return key;
    }

    public V getValue() {
        return value;
    }
}


class Solution {
    public List<Integer> topView(TreeNode root) {
        //your code goes here
        List<Integer>ans=new ArrayList<>();
        if(root==null){
            return ans;
        }
        Map<Integer,Integer>map=new TreeMap<>();
        Queue<Pair<TreeNode,Integer>>q=new LinkedList<>();
        q.add(new Pair<>(root,0));
        while(!q.isEmpty()){
          Pair<TreeNode,Integer>it=q.poll();
          TreeNode node=it.getKey();
          int line=it.getValue();
          if(!map.containsKey(line)){
            map.put(line,node.data);
          }
          if(node.left!=null){
            q.add(new Pair<>(node.left,line-1));
          }
          if(node.right!=null){
            q.add(new Pair<>(node.right,line+1));
          }
        }
        for(Integer value:map.values()){
            ans.add(value);
        }
        return ans;
    }   
}
